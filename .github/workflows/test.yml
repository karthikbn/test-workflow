name: CI
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run a one-line script
        run: echo Hello, world!

      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
    continue-on-error: false

  prepare:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install requests package
        run: pip install requests
    continue-on-error: false

  trigger-workflow:
     needs: [build, prepare]
     runs-on: ubuntu-latest
     steps:
       - name: Trigger Other WorkFlow
         env:
          SECRETTOKEN: ${{ secrets.SECRET_TOKEN }}
         id: trigger1
         run: |
           python - <<EOF
           import requests
           import json
           import os
           import random
           import string
           import datetime
           import requests
           import time

           print("Inside python")
           github_token = os.environ.get('SECRETTOKEN')
           #to fetch last run
           run_identifier = ''.join(random.choices(string.ascii_uppercase + string.digits, k=15))
           print(run_identifier)
           # filter runs that were created after this date minus 5 minutes
           delta_time = datetime.timedelta(minutes=3)
           run_date_filter = (datetime.datetime.utcnow()-delta_time).strftime("%Y-%m-%dT%H:%M")

           url = "https://api.github.com/repos/karthikbn/deploy-scripts/actions/workflows/blank.yml/dispatches"
           headers = {
               'Accept': 'application/vnd.github+json',
               'Authorization': f'Bearer {github_token}',
               'X-GitHub-Api-Version': '2022-11-28',
               'Content-Type': 'application/json'
           }

           payload = json.dumps({
               "ref": "master",
               "inputs": {
                   "id": f"{run_identifier}",
                   "values": "temp"
               }
           })

           response = requests.post(url, headers=headers, data=payload)
           print(f"dispatch workflow status: {response.status_code} | workflow identifier: {run_identifier}")
           counter_flag = "false"
           time.sleep(10)
           while counter_flag == "":
             r = requests.get(f"https://api.github.com/repos/karthikbn/deploy-scripts/actions/runs?created=%3E{run_date_filter}",
                 headers = headers)
             json_data = r.json()
             runs = r.json()["workflow_runs"]
             if len(runs) > 0:
               for workflow in runs:
                   jobs_url = workflow["jobs_url"]
                   print(f"get jobs_url {jobs_url}")
                   r = requests.get(jobs_url, headers= headers)
                   jobs = r.json()["jobs"]
                   jobs_count = len(jobs)
                   completed_job_count = 0
                   counter_loop = 0
                   if jobs_count > 0:
                     print(f"Total Jobs = {jobs_count}")
                     while jobs_count > completed_job_count:
                         print(f"Current loop count = {counter_loop}")
                         job = jobs[counter_loop]
                         job_name = job["name"]
                         print(f"Running check for Job : {job_name}")
                         status = job["status"]
                         print("------------------")
                         print(job)
                         print(f"Job Status : {status}")
                         print("------------------")
                         if status == 'completed':
                           print("Inside if loop post completion")
                           count = count + 1
                           completed_job_count = completed_job_count + 1
                           break
                         else:
                           print(f"Waiting for {job_name} Job to complete")
                           time.sleep(3)
                         r = requests.get(jobs_url, headers= headers)
                         jobs = r.json()["jobs"]

                   if completed_job_count == jobs_count:
                     counter_flag = "true"
           EOF
     continue-on-error: false
